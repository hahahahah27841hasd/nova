local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local AUTHORIZED_HWIDS = {
    ["2c993a76-5b37-44e0-a269-fcfa3ebcb4ab"] = "7eleven",
    ["1966855A-108E-4EFF-ADB7-384D82093047"] = "Louis"
}

local currentHWID = game:GetService("RbxAnalyticsService"):GetClientId()
local authorized = AUTHORIZED_HWIDS[currentHWID]

-- Base64 Decoder and Key Validation
local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local DataKey = "7elevn"

local function fromBase64(data)
    data = data:gsub('[^' .. b .. '=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r, f = '', (b:find(x) - 1)
        for i = 6, 1, -1 do r = r .. (f % 2^i - f % 2^(i - 1) > 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then return '' end
        local c = 0
        for i = 1, 8 do c = c + (x:sub(i, i) == '1' and 2^(8 - i) or 0) end
        return string.char(c)
    end))
end

local function validateKey(encodedKey)
    local success, decodedKey = pcall(function()
        return fromBase64(encodedKey)
    end)

    if not success then
        return false, "Couldn't decode"
    end

    if #decodedKey < (#DataKey + 12 + 1) then
        return false, "Key is invalid!"
    end

    local extractedDataKey = decodedKey:sub(1, #DataKey)
    local timestamp = tonumber(decodedKey:sub(#DataKey + 1, #DataKey + 10))
    local randomValue = tonumber(decodedKey:sub(#DataKey + 11, #DataKey + 11))
    local providedChecksum = tonumber(decodedKey:sub(#DataKey + 12, #DataKey + 12))
    local liveValue = decodedKey:sub(#DataKey + 13)

    if not timestamp then
        return false, "Invalid timestamp"
    end

    local currentTime = os.time()
    if not liveValue then
        if math.abs(currentTime - timestamp) > 86400 then
            return false, "Expired Key"
        end
    end

    if extractedDataKey ~= DataKey then
        return false, "Invalid DataKey"
    end

    if not randomValue or not providedChecksum or liveValue == "" then
        return false, "Invalid Key Structure"
    end

    local rawKey = DataKey .. tostring(timestamp) .. tostring(randomValue)
    local checksum = 0
    for i = 1, #rawKey do
        checksum = checksum + string.byte(rawKey:sub(i, i))
    end
    checksum = checksum % 10

    if checksum ~= providedChecksum then
        return false, "Checksum mismatch"
    end

    return true, "Key Accepted"
end

-- Helper Functions
local function tween(inst, props, time)
    return TweenService:Create(inst, TweenInfo.new(time or 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), props):Play()
end

local function new(class, props)
    local inst = Instance.new(class)
    for i, v in pairs(props) do
        inst[i] = v
    end
    return inst
end

-- Welcome UI Function
local function createWelcomeUI()
    for _, v in pairs(CoreGui:GetChildren()) do
        if v.Name == "WelcomeGui" then
            v:Destroy()
        end
    end

    local gui = new("ScreenGui", {
        Name = "WelcomeGui",
        IgnoreGuiInset = true,
        DisplayOrder = 999,
        Parent = CoreGui
    })

    local main = new("Frame", {
        Size = UDim2.new(0, 400, 0, 100),
        Position = UDim2.new(1.1, 0, 0.05, 0),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Parent = gui
    })

    new("UICorner", { CornerRadius = UDim.new(0, 12), Parent = main })
    new("UIStroke", {
        Color = Color3.fromRGB(70, 70, 70),
        Thickness = 1.5,
        Parent = main
    })

    new("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(40, 40, 40)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
        }),
        Rotation = 90,
        Parent = main
    })

    local profileContainer = new("Frame", {
        Size = UDim2.new(0, 64, 0, 64),
        Position = UDim2.new(0, 18, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = Color3.fromRGB(45, 45, 45),
        Parent = main
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = profileContainer })
    new("UIStroke", {
        Color = Color3.fromRGB(85, 85, 85),
        Thickness = 1.5,
        Parent = profileContainer
    })

    local profilePicture = new("ImageLabel", {
        Size = UDim2.new(1, -4, 1, -4),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "",
        Parent = profileContainer
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = profilePicture })

    local title = new("TextLabel", {
        Size = UDim2.new(0.7, 0, 0, 25),
        Position = UDim2.new(0.25, 0, 0, 15),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Text = "Welcome Owner-" .. authorized,
        TextTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })

    local subtitle = new("TextLabel", {
        Size = UDim2.new(0.7, 0, 0, 20),
        Position = UDim2.new(0.25, 0, 0, 40),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Font = Enum.Font.GothamMedium,
        Text = "Premium Access Detected",
        TextTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })

    local status = new("TextLabel", {
        Size = UDim2.new(0.7, 0, 0, 20),
        Position = UDim2.new(0.25, 0, 0, 60),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(180, 180, 180),
        TextSize = 14,
        Font = Enum.Font.GothamMedium,
        Text = "Initializing premium features...",
        TextTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })

    local progressBg = new("Frame", {
        Size = UDim2.new(0.72, 0, 0, 3),
        Position = UDim2.new(0.25, 0, 0, 85),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Parent = main
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = progressBg })

    local progress = new("Frame", {
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(255, 175, 70),
        Parent = progressBg
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = progress })

    local function animate()
        local player = Players.LocalPlayer
        if player then
            profilePicture.Image = Players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
        end

        tween(main, { Position = UDim2.new(1, -20, 0.05, 0) }, 0.7)
        
        task.wait(0.2)
        tween(title, { TextTransparency = 0 }, 0.4)
        task.wait(0.1)
        tween(subtitle, { TextTransparency = 0 }, 0.4)
        task.wait(0.1)
        tween(status, { TextTransparency = 0 }, 0.4)
        
        task.wait(0.2)
        tween(progress, { Size = UDim2.new(1, 0, 1, 0) }, 1)
        task.wait(1)

        status.Text = "Premium features activated!"
        tween(status, { TextColor3 = Color3.fromRGB(100, 255, 150) }, 0.3)
        tween(progress, { BackgroundColor3 = Color3.fromRGB(60, 255, 130) }, 0.3)
        
        loadstring(game:HttpGet("https://raw.githubusercontent.com/nova7q/nova/refs/heads/main/nova"))()
        
        task.wait(1.5)
        
        tween(title, { TextTransparency = 1 }, 0.3)
        tween(subtitle, { TextTransparency = 1 }, 0.3)
        tween(status, { TextTransparency = 1 }, 0.3)
        tween(progress, { BackgroundTransparency = 1 }, 0.3)
        tween(progressBg, { BackgroundTransparency = 1 }, 0.3)
        tween(profileContainer, { BackgroundTransparency = 1 }, 0.3)
        tween(profilePicture, { ImageTransparency = 1 }, 0.3)
        
        task.wait(0.2)
        tween(main, { Position = UDim2.new(1.1, 0, 0.05, 0) }, 0.5)
        
        task.wait(0.5)
        gui:Destroy()
    end

    animate()
end

-- Key System UI Function
local function createKeySystem(isOwner)
    for _, v in pairs(CoreGui:GetChildren()) do
        if v.Name == "KeySystemGui" then
            v:Destroy()
        end
    end

    local gui = new("ScreenGui", {
        Name = "KeySystemGui",
        IgnoreGuiInset = true,
        DisplayOrder = 999,
        Parent = CoreGui
    })

    local main = new("Frame", {
        Size = UDim2.new(0.4, 0, 0, 120),
        Position = UDim2.new(0.5, 0, -0.2, 0),
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Parent = gui
    })

    local blur = new("BlurEffect", {
        Size = 0,
        Parent = game:GetService("Lighting")
    })

    new("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(45, 45, 45)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(35, 35, 35)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 25))
        }),
        Rotation = 90,
        Parent = main
    })

    new("UICorner", { CornerRadius = UDim.new(0, 6), Parent = main })
    new("UIStroke", {
        Color = Color3.fromRGB(60, 60, 60),
        Thickness = 1.2,
        Parent = main
    })

    local profileContainer = new("Frame", {
        Size = UDim2.new(0, 54, 0, 54),
        Position = UDim2.new(0, 13, 0, 33),
        BackgroundColor3 = Color3.fromRGB(45, 45, 45),
        Parent = main
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = profileContainer })
    new("UIStroke", {
        Color = Color3.fromRGB(70, 70, 70),
        Thickness = 1.2,
        Parent = profileContainer
    })

    local profilePicture = new("ImageLabel", {
        Size = UDim2.new(1, -4, 1, -4),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "",
        Parent = profileContainer
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = profilePicture })

    local title = new("TextLabel", {
        Size = UDim2.new(0.7, 0, 0, 30),
        Position = UDim2.new(0.24, 0, 0, 10),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Text = isOwner and "NOVA OWNER KEY SYSTEM" or "NOVA KEY SYSTEM",
        TextTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })

    local keyInput = new("TextBox", {
        Size = UDim2.new(0.7, 0, 0, 30),
        Position = UDim2.new(0.24, 0, 0, 45),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.GothamMedium,
        Text = "",
        PlaceholderText = "Enter key...",
        TextTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })

    new("UICorner", { CornerRadius = UDim.new(0, 4), Parent = keyInput })
    new("UIPadding", { PaddingLeft = UDim.new(0, 8), Parent = keyInput })

    local status = new("TextLabel", {
        Size = UDim2.new(0.7, 0, 0, 20),
        Position = UDim2.new(0.24, 0, 0, 80),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(180, 180, 180),
        TextSize = 14,
        Font = Enum.Font.GothamMedium,
        Text = "Enter your key to continue",
        TextTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })

    local progressBg = new("Frame", {
        Size = UDim2.new(0.74, 0, 0, 2),
        Position = UDim2.new(0.24, 0, 0, 105),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Parent = main
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = progressBg })

    local progress = new("Frame", {
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(255, 175, 70),
        Parent = progressBg
    })

    new("UICorner", { CornerRadius = UDim.new(1, 0), Parent = progress })

    local function checkKeyAndExecute()
        tween(progress, { Size = UDim2.new(1, 0, 1, 0) }, 0.8)
        status.Text = "Checking key..."
        
        task.wait(0.8)
        
        local keyLength = #keyInput.Text
        
        if isOwner then
            -- Owner key check (exactly 30 characters)
            if keyLength == 30 then
                local isValid, message = validateKey(keyInput.Text)
                if isValid then
                    status.Text = "Owner Access Granted!"
                    tween(status, { TextColor3 = Color3.fromRGB(100, 255, 150) })
                    tween(progress, { BackgroundColor3 = Color3.fromRGB(60, 255, 130) })
                    
                    task.wait(1)
                    blur:Destroy()
                    gui:Destroy()
                    createWelcomeUI()
                    return
                end
            end
            status.Text = "Invalid owner key"
            tween(status, { TextColor3 = Color3.fromRGB(255, 100, 100) })
            tween(progress, { BackgroundColor3 = Color3.fromRGB(255, 70, 70) })
        else
            -- Normal key check (31 or 32 characters)
            if keyLength == 31 or keyLength == 32 then
                local isValid, message = validateKey(keyInput.Text)
                if isValid then
                    status.Text = "Access Granted!"
                    tween(status, { TextColor3 = Color3.fromRGB(100, 255, 150) })
                    tween(progress, { BackgroundColor3 = Color3.fromRGB(60, 255, 130) })
                    
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/nova7q/nova/refs/heads/main/nova"))()
                    
                    task.wait(1)
                    tween(blur, { Size = 0 }, 0.5)
                    tween(main, { Position = UDim2.new(0.5, 0, -0.2, 0) }, 0.5)
                    task.wait(0.5)
                    blur:Destroy()
                    gui:Destroy()
                    return
                end
            end
            status.Text = "Invalid key"
            tween(status, { TextColor3 = Color3.fromRGB(255, 100, 100) })
            tween(progress, { BackgroundColor3 = Color3.fromRGB(255, 70, 70) })
        end
        
        task.wait(2)
        -- Reset progress bar
        tween(progress, { Size = UDim2.new(0, 0, 1, 0) }, 0.3)
        task.wait(0.3)
        progress.BackgroundColor3 = Color3.fromRGB(255, 175, 70)
        status.TextColor3 = Color3.fromRGB(180, 180, 180)
        status.Text = "Enter your key to continue"
    end

    local function animate()
        local player = Players.LocalPlayer
        if not player then return end
        
        local userId = player.UserId
        profilePicture.Image = Players:GetUserThumbnailAsync(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
        
        tween(blur, { Size = 15 }, 0.5)
        tween(main, { Position = UDim2.new(0.5, 0, 0.1, 0) }, 0.5)
        
        task.wait(0.1)
        tween(title, { TextTransparency = 0 }, 0.3)
        task.wait(0.1)
        tween(status, { TextTransparency = 0 }, 0.3)
        task.wait(0.1)
        tween(keyInput, { TextTransparency = 0 }, 0.3)
    end

    keyInput.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            checkKeyAndExecute()
        end
    end)

    animate()
end

-- Main execution
if authorized then
    createKeySystem(true) -- Show owner key system with 30-char key check
else
    createKeySystem(false) -- Show normal key system with 31 or 32-char key check
end
